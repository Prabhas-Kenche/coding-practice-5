const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const app = express()
app.use(express.json())

const dbPath = path.join(__dirname, 'moviesData.db')

let db = null

const initializeDBandServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB error : ${e.message}`)
    process.exit(1)
  }
}

initializeDBandServer()

const convertDbObjectToResponseObject = dbObject => {
  return {
    movieId: dbObject.movie_id,
    directorId: dbObject.director_id,
    movieName: dbObject.movie_name,
    leadActor: dbObject.lead_actor,
  }
}

//API - 1
app.get('/movies/', async (request, response) => {
  const getMovieNameQuery = `
    SELECT
    movie_name
    FROM
    movie`
  const movieName = await db.all(getMovieNameQuery)
  response.send(movieName.map(eachMovie => ({movieName: eachMovie.movie_name})))
})

//API - 2
app.post('/movies/', async (request, response) => {
  const {directorId, movieName, leadActor} = request.body

  const addMovieQuery = `
  INSERT INTO
  movie (director_id, movie_name, lead_actor)
  VALUES 
  (
    ${directorId},
    '${movieName}',
    '${leadActor}'
  );`
  const dbResponse = await db.run(addMovieQuery)

  response.send('Movie Successfully Added')
})

//API - 3
app.get('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const getMovieQuery = `
  SELECT
  *
  FROM
  movie
  WHERE
  movie_id = ${movieId};`
  const movieArray = await db.all(getMovieQuery)
  response.send(
    movieArray.map(eachMovie => convertDbObjectToResponseObject(eachMovie)),
  )
})

//API - 4
app.put('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const movieDetails = request.body
  const {directorId, movieName, leadActor} = movieDetails

  const updatePlayerQuery = `
  UPDATE
  movie
  SET
  director_id = '${directorId}',
  movie_name = ${movieName},
  lead_actor = '${leadActor}'
  WHERE movie_id = ${movieId};`

  await db.run(updatePlayerQuery)
  response.send('Movie Details Updated')
})

//API - 5
app.delete('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const deleteMovieQuery = `
  DELETE FROM
  movie
  WHERE
  movie_id = ${movieId};`

  await db.run(deleteMovieQuery)
  response.send('Movie Removed')
})

//API - 6
app.get('/directors/', async (request, response) => {
  const getDirectorQuery = `
  SELECT
  *
  FROM
  director`
  const directors = await db.all(getDirectorQuery)
  response.send(
    directors.map(direct => ({
      directorId: direct.director_id,
      directorName: direct.director_name,
    })),
  )
})

//API - 7
app.get('/directors/:directorId/movies/', async (request, response) => {
  const getMovieDetailsQuery = `
  SELECT
    movie_name
  FROM
    movie NATURAL JOIN director
  where
    movie.director_id = director.director_id`

  const movieNames = await db.all(getMovieDetailsQuery)
  response.send(
    movieNames.map(name => ({
      movieName: name.movie_name,
    })),
  )
})

module.exports = app
